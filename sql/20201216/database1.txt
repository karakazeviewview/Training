//データベース作成 
CREATE DATABASE myapp DEFAULT CHARASET utf8; 

//データベース削除
DROP DATABASE IF EXISTS myapp;

//テーブル作成
CREATE TABLE members(
id INT PRIMARY KEY AUTO INCREMENT,
name VARCHAR(30),
depart VARCHER(20)DEAULT '無所属',
age INT,
update DATE
);

//テーブル削除
DROP TABLE IF EXISTS members;

//データ挿入
INSERT INTO members(id,name,depart,age,updated)
VALUES(1,'山田太郎','営業部','40','2014-12-01');

//カラムを指定して挿入
INSERT INTO members(name,age)
VALUES('鈴木さくら',25)

//全カラムに対しての挿入はカラム名省略可能
INSERT INTO members
VALUES(3,'佐藤次郎','人事部','35','2015-01-15')


/*連続入力*/
INSERT INTO members(name,depart,age)
VALUES('田中一郎','経理部',48),
('山口弘子','営業部',28),
('渡辺順二','人事部',58),
('中島博之','総務部',49),
('山下圭吾','経理部',23);

//SELECT
//全件抽出
SELECT * FROM members;

//nameカラム取得
SELECT name FROM members;

//name,ageカラム取得
SELECT name,age FROM members;

//WHERE句で絞り込み
SELECT * FROM members WHERE age=25;
SELECT * FROM members WHERE age>25;
SELECT * FROM members WHERE age>=25;
//~でない
SELECT * FROM members WHERE age <> 25;
SELECT * FROM members WHERE age > 25 AND age < 40;
SELECT * FROM members WHERE age > 25 OR updated <= '2015-02-15';

//BETWEEN(端含む)
SELECT * FROM members WHERE updated BETWEEN '2015-01-15' AND '2015-02-15';

//INに含まれるデータを抽出
SELECT * FROM members WHERE depart IN('営業部','人事部');

//null判定
SELECT * FROM members WHERE updated IS NULL;
SELECT * FROM members WHERE updated IS NOT NULL;

//あいまい検索
SELECT * FROM members WHERE name LIKE '鈴木%';
SELECT * FROM members WHERE name LIKE '%木%';
SELECT * FROM members WHERE name LIKE '%田';

//北が含まれない
SELECT * FROM members WHERE name NOT LIKE '%北%';

//ORDER BY(並び替え)
//年齢降順(asc desc ケツはc)
SELECT * FROM members ORDER BY age DESC;


//WHERE句との組み合わせは先にWHERE
//
SELECT * FROM members ORDER BY age DESC;

//WHEREku
ORDER BY age ASC;

//件数制限
SELECT * FROM members ORDER BY age DESC LIMIT 3;

//OFFSET指定
SELECT * FROM members ORDER BY age DESC LIMIT 3 OFFSET 1;

//UPDATE(更新)

UPDATE members SET depart='人事部'
WHERE name='鈴木さくら';

//SETも列挙可能
UPDATE members SET depart='人事部',age=age+1
WHERE name='鈴木さくら';

//DELETE(削除)(WHERE句を忘れたら大事件)
WHERE FROM members WHERE id=3;

//集計関数
//件数
SELECT count(*) FROM members;
//年齢の平均(aveではないので注意)
SELECT avg(age) FROM members;
//年齢の最大
SELECT max(age) FROM members;
//年齢の最小
SELECT min(age) FROM members;
//年齢の合計
SELECT sum(age) FROM members;

//GROUP BY(同一項目をまとめる、主に集計関数と共に使う。結果はグループの数だけ)
SELECT depart.avg(age) FROM members
GROUP BY depart;

//HAVING(GROUP BYした結果に対する絞り込み)
SELECT depart.avg(age) FROM members
GROUP BY depart
HAVING avg(age) >=30;
