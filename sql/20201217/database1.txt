//データベース作成 
CREATE DATABASE myapp DEFAULT CHARASET utf8; 

//データベース削除
DROP DATABASE IF EXISTS myapp;

//テーブル作成
CREATE TABLE members(
id INT PRIMARY KEY AUTO INCREMENT,
name VARCHAR(30),
depart VARCHER(20)DEAULT '無所属',
age INT,
update DATE
);

//テーブル削除
DROP TABLE IF EXISTS members;

//データ挿入
INSERT INTO members(id,name,depart,age,updated)
VALUES(1,'山田太郎','営業部','40','2014-12-01');

//カラムを指定して挿入
INSERT INTO members(name,age)
VALUES('鈴木さくら',25)

//全カラムに対しての挿入はカラム名省略可能
INSERT INTO members
VALUES(3,'佐藤次郎','人事部','35','2015-01-15')


/*連続入力*/
INSERT INTO members(name,depart,age)
VALUES('田中一郎','経理部',48),
('山口弘子','営業部',28),
('渡辺順二','人事部',58),
('中島博之','総務部',49),
('山下圭吾','経理部',23);

//SELECT
//全件抽出
SELECT * FROM members;

//nameカラム取得
SELECT name FROM members;

//name,ageカラム取得
SELECT name,age FROM members;

//WHERE句で絞り込み
SELECT * FROM members WHERE age=25;
SELECT * FROM members WHERE age>25;
SELECT * FROM members WHERE age>=25;
//~でない
SELECT * FROM members WHERE age <> 25;
SELECT * FROM members WHERE age > 25 AND age < 40;
SELECT * FROM members WHERE age > 25 OR updated <= '2015-02-15';

//BETWEEN(端含む)
SELECT * FROM members WHERE updated BETWEEN '2015-01-15' AND '2015-02-15';

//INに含まれるデータを抽出
SELECT * FROM members WHERE depart IN('営業部','人事部');

//null判定
SELECT * FROM members WHERE updated IS NULL;
SELECT * FROM members WHERE updated IS NOT NULL;

//あいまい検索
SELECT * FROM members WHERE name LIKE '鈴木%';
SELECT * FROM members WHERE name LIKE '%木%';
SELECT * FROM members WHERE name LIKE '%田';

//北が含まれない
SELECT * FROM members WHERE name NOT LIKE '%北%';

//ORDER BY(並び替え)
//年齢降順(asc desc ケツはc)
SELECT * FROM members ORDER BY age DESC;


//WHERE句との組み合わせは先にWHERE
//
SELECT * FROM members ORDER BY age DESC;

//WHEREku
ORDER BY age ASC;

//件数制限
SELECT * FROM members ORDER BY age DESC LIMIT 3;

//OFFSET指定
SELECT * FROM members ORDER BY age DESC LIMIT 3 OFFSET 1;

//UPDATE(更新)

UPDATE members SET depart='人事部'
WHERE name='鈴木さくら';

//SETも列挙可能
UPDATE members SET depart='人事部',age=age+1
WHERE name='鈴木さくら';

//DELETE(削除)(WHERE句を忘れたら大事件)
WHERE FROM members WHERE id=3;

//集計関数
//件数
SELECT count(*) FROM members;
//年齢の平均(aveではないので注意)
SELECT avg(age) FROM members;
//年齢の最大
SELECT max(age) FROM members;
//年齢の最小
SELECT min(age) FROM members;
//年齢の合計
SELECT sum(age) FROM members;

//GROUP BY(同一項目をまとめる、主に集計関数と共に使う。結果はグループの数だけ)
SELECT depart.avg(age) FROM members
GROUP BY depart;

//HAVING(GROUP BYした結果に対する絞り込み)
SELECT depart.avg(age) FROM members
GROUP BY depart
HAVING avg(age) >=30;


上記で作成したテーブルにおいて以下の処理を実現するSQL文を記せ。
1.全てのデータを抽出せよ。

2.以下の本を追加せよ。'漫画','アラレちゃん',400,'1978-12-11'

3.idが10のデータのカテゴリーを小説にせよ。

4.タイトルに図鑑が入っている本を削除せよ。

5.select title.price FROM books WHERE category='小説';

6.カテゴリがnullを未分類に変更
UPDATE books SET category='未分類' where category is null

insert into books(title,price)
values ('Java入門',1800);

7.次のデータを挿入せよ。’Java入門’,1800

8.値段の高い順に抽出せよ。

9.select count(*) from books;

updated 

10.1000円以上
select *from books where price>=1000;
insert into books(category,title,price,updated)
insert into books('漫画','アラレちゃん','400','1978-12-11')

11.11.カテゴリーが漫画のデータを一律50円値下げせよ。変更があるので、どうみてもupdate
update books set price=price-50 where category='漫画';

12.12.一番値段の高い本を抽出せよ。取得列はtitle,priceとすること。maxは集計関数で、priceだけ出す。

select title.price from books order by price desc limit 1;

13.すべての本の価格の平均を求めよ。aveでなくavg
selsect avg(price) from books;

14.更新日が1980~1990年のデータを日付昇順で抽出せよ。asc 昇順 先にwhere句で絞り込む。
select * from books where updated between '1980-01-01' and '1990-12-31'
order by updated asc;

15.値段の安いやつ　select アスタリスク　３冊リミット
select * from books order by price asc limit 3;

16.値段が2番目に高い本を抽出 取得カラムtitle price 。並び替えはorder by
select title,price from books order by price desc limit 1 offset 1;

17.更新日がnullでなく、カテゴリが小説でないもの抽出。nullかどうかだけは、is null ,is not nullと書く。
他は、=,<,>で書く。
select * from books where updated is not null and category <> '小説';

18.カテゴリ未分類
select * from books where category='未分類';

19.カテゴリごとの平均価格、降順。category ,avg(price)
select category,avg(price) from books
group by category
order by avg(price) desc

20.カテゴリー毎の合計価格を求め,合計価格が5000円以上の項目を抽出せよ。取得カラムはcategory,sum(price)とする。having
s<Nop>set nobackupelect category,sum(price) from books 
o
group by category 
having sum(price)>=5000;





問題作成
カテゴリーが漫画で、500円以上のデータを抽出せよ。取得カラムはtitle,priceとすること

カテゴリーが小説と漫画のデータを一律300円値上げせよ。

以下の本を追加せよ。’小説’、’老人と海’、400,’1952-01-01′



